{"nodes": [{"code": "    @Override\n    public void shutdown(boolean interrupt) {\n        super.shutdown(interrupt);\n        ThreadUtils.shutdownGracefully(this.scheduledExecutorService, 1000, TimeUnit.MILLISECONDS);\n    }\n", "file_name": "44e4216b4d81f8d6f628f2e45ba55c918885bf31__CLDIFF__client/src/main/java/org/apache/rocketmq/client/impl/consumer/PullMessageService.java", "id": 48, "desc": "addMethodDeclaration", "group": 0}, {"code": "public final class ThreadUtils {\n    private static final Logger log = LoggerFactory.getLogger(LoggerName.TOOLS_LOGGER_NAME);\n\n    public static ExecutorService newThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime,\n        TimeUnit unit, BlockingQueue<Runnable> workQueue, String processName, boolean isDaemon) {\n        return new ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, newThreadFactory(processName, isDaemon));\n    }\n\n    public static ExecutorService newSingleThreadExecutor(String processName, boolean isDaemon) {\n        return Executors.newSingleThreadExecutor(newThreadFactory(processName, isDaemon));\n    }\n\n    public static ScheduledExecutorService newSingleThreadScheduledExecutor(String processName, boolean isDaemon) {\n        return Executors.newSingleThreadScheduledExecutor(newThreadFactory(processName, isDaemon));\n    }\n\n    public static ScheduledExecutorService newFixedThreadScheduledPool(int nThreads, String processName,\n        boolean isDaemon) {\n        return Executors.newScheduledThreadPool(nThreads, newThreadFactory(processName, isDaemon));\n    }\n\n    public static ThreadFactory newThreadFactory(String processName, boolean isDaemon) {\n        return newGenericThreadFactory(\"Remoting-\" + processName, isDaemon);\n    }\n\n    public static ThreadFactory newGenericThreadFactory(String processName) {\n        return newGenericThreadFactory(processName, false);\n    }\n\n    public static ThreadFactory newGenericThreadFactory(String processName, int threads) {\n        return newGenericThreadFactory(processName, threads, false);\n    }\n\n    public static ThreadFactory newGenericThreadFactory(final String processName, final boolean isDaemon) {\n        return new ThreadFactory() {\n            private AtomicInteger threadIndex = new AtomicInteger(0);\n\n            @Override\n            public Thread newThread(Runnable r) {\n                Thread thread = new Thread(r, String.format(\"%s_%d\", processName, this.threadIndex.incrementAndGet()));\n                thread.setDaemon(isDaemon);\n                return thread;\n            }\n        };\n    }\n\n    public static ThreadFactory newGenericThreadFactory(final String processName, final int threads,\n        final boolean isDaemon) {\n        return new ThreadFactory() {\n            private AtomicInteger threadIndex = new AtomicInteger(0);\n\n            @Override\n            public Thread newThread(Runnable r) {\n                Thread thread = new Thread(r, String.format(\"%s_%d_%d\", processName, threads, this.threadIndex.incrementAndGet()));\n                thread.setDaemon(isDaemon);\n                return thread;\n            }\n        };\n    }\n\n    /**\n     * Create a new thread\n     *\n     * @param name The name of the thread\n     * @param runnable The work for the thread to do\n     * @param daemon Should the thread block JVM stop?\n     * @return The unstarted thread\n     */\n    public static Thread newThread(String name, Runnable runnable, boolean daemon) {\n        Thread thread = new Thread(runnable, name);\n        thread.setDaemon(daemon);\n        thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n            public void uncaughtException(Thread t, Throwable e) {\n                log.error(\"Uncaught exception in thread '\" + t.getName() + \"':\", e);\n            }\n        });\n        return thread;\n    }\n\n    /**\n     * Shutdown passed thread using isAlive and join.\n     *\n     * @param t Thread to stop\n     */\n    public static void shutdownGracefully(final Thread t) {\n        shutdownGracefully(t, 0);\n    }\n\n    /**\n     * Shutdown passed thread using isAlive and join.\n     *\n     * @param millis Pass 0 if we're to wait forever.\n     * @param t Thread to stop\n     */\n    public static void shutdownGracefully(final Thread t, final long millis) {\n        if (t == null)\n            return;\n        while (t.isAlive()) {\n            try {\n                t.interrupt();\n                t.join(millis);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n\n    /**\n     * An implementation of the graceful stop sequence recommended by\n     * {@link ExecutorService}.\n     *\n     * @param executor executor\n     * @param timeout timeout\n     * @param timeUnit timeUnit\n     */\n    public static void shutdownGracefully(ExecutorService executor, long timeout, TimeUnit timeUnit) {\n        // Disable new tasks from being submitted.\n        executor.shutdown();\n        try {\n            // Wait a while for existing tasks to terminate.\n            if (!executor.awaitTermination(timeout, timeUnit)) {\n                executor.shutdownNow();\n                // Wait a while for tasks to respond to being cancelled.\n                if (!executor.awaitTermination(timeout, timeUnit)) {\n                    log.warn(String.format(\"%s didn't terminate!\", executor));\n                }\n            }\n        } catch (InterruptedException ie) {\n            // (Re-)Cancel if current thread also interrupted.\n            executor.shutdownNow();\n            // Preserve interrupt status.\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    /**\n     * A constructor to stop this class being constructed.\n     */\n    private ThreadUtils() {\n        // Unused\n\n    }\n}\n", "file_name": "44e4216b4d81f8d6f628f2e45ba55c918885bf31__CLDIFF__common/src/main/java/org/apache/rocketmq/common/utils/ThreadUtils.java", "id": 49, "desc": "addClassDeclaration", "group": 1}], "edges": [{"link_type_str": "def-use@taicu", "source": 49, "text": "def-use@taicu", "type": 51, "value": 1, "target": 48}]}